import { Audio } from 'expo-av';

class SoundService {
  private sounds: {
    eat?: Audio.Sound;
    gameOver?: Audio.Sound;
    move?: Audio.Sound;
  } = {};

  async loadSounds() {
    try {
      const eatSound = new Audio.Sound();
      const gameOverSound = new Audio.Sound();
      const moveSound = new Audio.Sound();

      await Promise.all([
        eatSound.loadAsync(require('../assets/sounds/eat.mp3')),
        gameOverSound.loadAsync(require('../assets/sounds/game-over.mp3')),
        moveSound.loadAsync(require('../assets/sounds/move.mp3'))
      ]);

      // Ses seviyelerini ayarla
      await Promise.all([
        eatSound.setVolumeAsync(0.5),
        gameOverSound.setVolumeAsync(0.7),
        moveSound.setVolumeAsync(0.3)
      ]);

      this.sounds = {
        eat: eatSound,
        gameOver: gameOverSound,
        move: moveSound
      };

      console.log('All sounds loaded successfully');
    } catch (error) {
      console.error('Error loading sounds:', error);
    }
  }

  async playSound(type: 'eat' | 'gameOver' | 'move') {
    try {
      console.log(`Playing ${type} sound...`);
      const sound = this.sounds[type];
      if (sound) {
        await sound.replayAsync();
        console.log(`${type} sound played successfully`);
      } else {
        console.warn(`${type} sound not found`);
      }
    } catch (error) {
      console.error(`Error playing ${type} sound:`, error);
    }
  }

  async unloadSounds() {
    try {
      await Promise.all(
        Object.values(this.sounds).map(sound => sound?.unloadAsync())
      );
    } catch (error) {
      console.error('Error unloading sounds:', error);
    }
  }
}

export const soundService = new SoundService();

// Ses dosyaları için base64 formatında kodlanmış veriler
const soundFiles = {
  eat: 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAZIAAGBgYGDQ0NDQ0UFBQUGhoaGhoiIiIiKSkpKSlAQEBAUFBQUFBXV1dXXl5eXl5mZmZmbW1tbW11dXV1fX19fX2EhISEi4uLi4uTk5OTmpqampqioqKiqampqam4uLi4v7+/v7/Hx8fHzs7Ozs7W1tbW3d3d3d3l5eXl7Ozs7Oz09PT0+/v7+/v//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UGQAAANUAEn1AAAAAAABJAAAAQAAAaQAAAAgAAA0gAAABExBTUUzLjEwkAA/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARMQU1FMy4x
  gameOver: 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAZIAAGBgYGDQ0NDQ0UFBQUGhoaGhoiIiIiKSkpKSlAQEBAUFBQUFBXV1dXXl5eXl5mZmZmbW1tbW11dXV1fX19fX2EhISEi4uLi4uTk5OTmpqampqioqKiqampqam4uLi4v7+/v7/Hx8fHzs7Ozs7W1tbW3d3d3d3l5eXl7Ozs7Oz09PT0+/v7+/v//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UGQAAANUAEn1AAAAAAABJAAAAQAAAaQAAAAgAAA0gAAABExBTUUzLjEwkAA/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARMQU1FMy4x
  move: 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4Ljc2LjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAASAAAZIAAGBgYGDQ0NDQ0UFBQUGhoaGhoiIiIiKSkpKSlAQEBAUFBQUFBXV1dXXl5eXl5mZmZmbW1tbW11dXV1fX19fX2EhISEi4uLi4uTk5OTmpqampqioqKiqampqam4uLi4v7+/v7/Hx8fHzs7Ozs7W1tbW3d3d3d3l5eXl7Ozs7Oz09PT0+/v7+/v//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7UGQAAANUAEn1AAAAAAABJAAAAQAAAaQAAAAgAAA0gAAABExBTUUzLjEw
};

// Ses dosyalarını oluştur
async function createSoundFile(base64Data: string, fileName: string) {
  try {
    const response = await fetch(base64Data);
    const blob = await response.blob();
    const file = new File([blob], fileName, { type: 'audio/mp3' });
    return file;
  } catch (error) {
    console.error('Error creating sound file:', error);
    return null;
  }
}

// Ses dosyalarını kaydet
async function saveSoundFiles() {
  try {
    await Promise.all([
      createSoundFile(soundFiles.eat, 'eat.mp3'),
      createSoundFile(soundFiles.gameOver, 'game-over.mp3'),
      createSoundFile(soundFiles.move, 'move.mp3')
    ]);
    console.log('Sound files created successfully');
  } catch (error) {
    console.error('Error saving sound files:', error);
  }
}

// Ses dosyalarını oluştur
saveSoundFiles();